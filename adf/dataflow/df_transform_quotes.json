{
	"name": "df_transform_quotes",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cvm_if_source_transform",
						"type": "DatasetReference"
					},
					"name": "SourceQuotesFromRawLayer"
				},
				{
					"dataset": {
						"referenceName": "ds_cvm_funds_register_adls",
						"type": "DatasetReference"
					},
					"name": "SourceRegisterRawLayer"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DataQualityAsserts"
				},
				{
					"name": "WindowFunctionsToFindDuplicates"
				},
				{
					"name": "split1"
				},
				{
					"name": "LowerColumnNames",
					"description": "Lowering Column Names"
				},
				{
					"name": "select1"
				},
				{
					"name": "SelectMainColumnsFundsRegister",
					"description": "Select main coluns of investiment funds register"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TP_FUNDO as string,",
				"          CNPJ_FUNDO as string,",
				"          DT_COMPTC as date,",
				"          VL_TOTAL as double,",
				"          VL_QUOTA as double,",
				"          VL_PATRIM_LIQ as double,",
				"          CAPTC_DIA as double,",
				"          RESG_DIA as double,",
				"          NR_COTST as integer,",
				"          ingestion_timestamp as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceQuotesFromRawLayer",
				"source(output(",
				"          TP_FUNDO as string,",
				"          CNPJ_FUNDO as string,",
				"          DENOM_SOCIAL as string,",
				"          DT_REG as string,",
				"          DT_CONST as string,",
				"          CD_CVM as string,",
				"          DT_CANCEL as string,",
				"          SIT as string,",
				"          DT_INI_SIT as string,",
				"          DT_INI_ATIV as string,",
				"          DT_INI_EXERC as string,",
				"          DT_FIM_EXERC as string,",
				"          CLASSE as string,",
				"          DT_INI_CLASSE as string,",
				"          RENTAB_FUNDO as string,",
				"          CONDOM as string,",
				"          FUNDO_COTAS as string,",
				"          FUNDO_EXCLUSIVO as string,",
				"          TRIB_LPRAZO as string,",
				"          PUBLICO_ALVO as string,",
				"          ENTID_INVEST as string,",
				"          TAXA_PERFM as string,",
				"          INF_TAXA_PERFM as string,",
				"          TAXA_ADM as string,",
				"          INF_TAXA_ADM as string,",
				"          VL_PATRIM_LIQ as string,",
				"          DT_PATRIM_LIQ as string,",
				"          DIRETOR as string,",
				"          CNPJ_ADMIN as string,",
				"          ADMIN as string,",
				"          PF_PJ_GESTOR as string,",
				"          CPF_CNPJ_GESTOR as string,",
				"          GESTOR as string,",
				"          CNPJ_AUDITOR as string,",
				"          AUDITOR as string,",
				"          CNPJ_CUSTODIANTE as string,",
				"          CUSTODIANTE as string,",
				"          CNPJ_CONTROLADOR as string,",
				"          CONTROLADOR as string,",
				"          INVEST_CEMPR_EXTER as string,",
				"          CLASSE_ANBIMA as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceRegisterRawLayer",
				"WindowFunctionsToFindDuplicates, SelectMainColumnsFundsRegister assert(expectTrue(!isNull(LowerColumnNames@cnpj_fundo), false, 'assertCNPJNotNull'),",
				"     expectTrue(!isNull(dt_comptc), false, 'assertDtComptcNotNull'),",
				"     expectTrue(vl_quota>0, false, 'assertValorCotaMaiorZero'),",
				"     expectTrue(row_number==1, false, 'assertNotDuplicates'),",
				"     expectExists(LowerColumnNames@cnpj_fundo == SelectMainColumnsFundsRegister@CNPJ_FUNDO, false, 'assertFundsExists')) ~> DataQualityAsserts",
				"LowerColumnNames window(over(cnpj_fundo,",
				"          dt_comptc),",
				"     asc(dt_comptc, true),",
				"     row_number = rowNumber()) ~> WindowFunctionsToFindDuplicates",
				"DataQualityAsserts split(!isError(),",
				"     disjoint: false) ~> split1@(AssertPassedCondition, AssertFailCondition)",
				"SourceQuotesFromRawLayer select(mapColumn(",
				"          each(match(true()),",
				"               lower($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LowerColumnNames",
				"split1@AssertPassedCondition select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"SourceRegisterRawLayer select(mapColumn(",
				"          TP_FUNDO,",
				"          CNPJ_FUNDO,",
				"          DENOM_SOCIAL,",
				"          DT_REG,",
				"          DT_CONST,",
				"          CD_CVM,",
				"          DT_CANCEL,",
				"          SIT,",
				"          DT_INI_SIT,",
				"          DT_INI_ATIV,",
				"          DT_INI_EXERC,",
				"          DT_FIM_EXERC,",
				"          CLASSE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectMainColumnsFundsRegister",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}