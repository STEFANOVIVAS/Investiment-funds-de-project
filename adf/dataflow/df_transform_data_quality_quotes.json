{
	"name": "df_transform_data_quality_quotes",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cvm_if_source_transform",
						"type": "DatasetReference"
					},
					"name": "SourceDataFromRawLayer"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "LowerColumnNames",
					"description": "Lower case column names "
				},
				{
					"name": "assert1"
				},
				{
					"name": "window1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TP_FUNDO as string,",
				"          CNPJ_FUNDO as string,",
				"          DT_COMPTC as date,",
				"          VL_TOTAL as double,",
				"          VL_QUOTA as double,",
				"          VL_PATRIM_LIQ as double,",
				"          CAPTC_DIA as double,",
				"          RESG_DIA as double,",
				"          NR_COTST as integer,",
				"          ingestion_timestamp as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDataFromRawLayer",
				"SourceDataFromRawLayer select(mapColumn(",
				"          each(match(true()),",
				"               lower($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LowerColumnNames",
				"window1 assert(expectTrue(!isNull(cnpj_fundo), false, 'assertCNPJNotNull'),",
				"     expectTrue(!isNull(dt_comptc), false, 'assertDtComptcNotNull'),",
				"     expectTrue(vl_quota>0, false, 'assertValorCotaMaiorZero'),",
				"     expectUnique(cnpj_fundo && dt_comptc, false, 'assert4')) ~> assert1",
				"LowerColumnNames window(over(cnpj_fundo,",
				"          dt_comptc),",
				"     row_number = rank()) ~> window1"
			]
		}
	}
}